SKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATISKIP TO MAIN CONTENT
SKIP TO SEARCH
SKIP TO SELECT LANGUAGE
REFERENCES
GUIDES
MDN PLUS
SEARCH MDN
SEARCH

THEME
LOG IN
GET MDN PLUS
REFERENCES
JAVASCRIPT
REFERENCE
EXPRESSIONS AND OPERATORS
AWAIT

ENGLISH (US)
JAVASCRIPT
TUTORIALS
COMPLETE BEGINNERS
JAVASCRIPT GUIDE
INTERMEDIATE
ADVANCED
REFERENCES
BUILT-IN OBJECTS
EXPRESSIONS & OPERATORS
OVERVIEW
ADDITION (+)
ADDITION ASSIGNMENT (+=)
ASSIGNMENT (=)
ASYNC FUNCTION EXPRESSION
ASYNC FUNCTION* EXPRESSION
AWAIT
BITWISE AND (&)
BITWISE AND ASSIGNMENT (&=)
BITWISE NOT (~)
BITWISE OR (|)
BITWISE OR ASSIGNMENT (|=)
BITWISE XOR (^)
BITWISE XOR ASSIGNMENT (^=)
CLASS EXPRESSION
COMMA OPERATOR (,)
CONDITIONAL (TERNARY) OPERATOR
DECREMENT (--)
DELETE OPERATOR
DESTRUCTURING ASSIGNMENT
DIVISION (/)
DIVISION ASSIGNMENT (/=)
EQUALITY (==)
EXPONENTIATION (**)
EXPONENTIATION ASSIGNMENT (**=)
FUNCTION EXPRESSION
FUNCTION* EXPRESSION
GREATER THAN (>)
GREATER THAN OR EQUAL (>=)
GROUPING OPERATOR ( )
IMPORT.META
IMPORT()
IN OPERATOR
INCREMENT (++)
INEQUALITY (!=)
INSTANCEOF
LEFT SHIFT (<<)
LEFT SHIFT ASSIGNMENT (<<=)
LESS THAN (<)
LESS THAN OR EQUAL (<=)
LOGICAL AND (&&)
LOGICAL AND ASSIGNMENT (&&=)
LOGICAL NOT (!)
LOGICAL OR (||)
LOGICAL OR ASSIGNMENT (||=)
MULTIPLICATION (*)
MULTIPLICATION ASSIGNMENT (*=)
NEW OPERATOR
NEW.TARGET
NULL
NULLISH COALESCING ASSIGNMENT (??=)
NULLISH COALESCING OPERATOR (??)
OBJECT INITIALIZER
OPERATOR PRECEDENCE
OPTIONAL CHAINING (?.)
PROPERTY ACCESSORS
REMAINDER (%)
REMAINDER ASSIGNMENT (%=)
RIGHT SHIFT (>>)
RIGHT SHIFT ASSIGNMENT (>>=)
SPREAD SYNTAX (...)
STRICT EQUALITY (===)
STRICT INEQUALITY (!==)
SUBTRACTION (-)
SUBTRACTION ASSIGNMENT (-=)
SUPER
THIS
TYPEOF
UNARY NEGATION (-)
UNARY PLUS (+)
UNSIGNED RIGHT SHIFT (>>>)
UNSIGNED RIGHT SHIFT ASSIGNMENT (>>>=)
VOID OPERATOR
YIELD
YIELD*
STATEMENTS & DECLARATIONS
FUNCTIONS
CLASSES
ERRORS
MISC
IN THIS ARTICLE
SYNTAX
DESCRIPTION
EXAMPLES
SPECIFICATIONS
BROWSER COMPATIBILITY
SEE ALSO
AWAIT
THE AWAIT OPERATOR IS USED TO WAIT FOR A PROMISE AND GET ITS FULFILLMENT VALUE. IT CAN ONLY BE USED INSIDE AN ASYNC FUNCTION OR AT THE TOP LEVEL OF A MODULE.

SYNTAX
AWAIT EXPRESSION
COPY TO CLIPBOARD
PARAMETERS
EXPRESSION
A PROMISE, A THENABLE OBJECT, OR ANY VALUE TO WAIT FOR.

RETURN VALUE
THE FULFILLMENT VALUE OF THE PROMISE OR THENABLE OBJECT, OR, IF THE EXPRESSION IS NOT THENABLE, THE EXPRESSION'S OWN VALUE.

EXCEPTIONS
THROWS THE REJECTION REASON IF THE PROMISE OR THENABLE OBJECT IS REJECTED.

DESCRIPTION
AWAIT IS USUALLY USED TO UNWRAP PROMISES BY PASSING A PROMISE AS THE EXPRESSION. USING AWAIT PAUSES THE EXECUTION OF ITS SURROUNDING ASYNC FUNCTION UNTIL THE PROMISE IS SETTLED (THAT IS, FULFILLED OR REJECTED). WHEN EXECUTION RESUMES, THE VALUE OF THE AWAIT EXPRESSION BECOMES THAT OF THE FULFILLED PROMISE.

IF THE PROMISE IS REJECTED, THE AWAIT EXPRESSION THROWS THE REJECTED VALUE. THE FUNCTION CONTAINING THE AWAIT EXPRESSION WILL APPEAR IN THE STACK TRACE OF THE ERROR. OTHERWISE, IF THE REJECTED PROMISE IS NOT AWAITED OR IS IMMEDIATELY RETURNED, THE CALLER FUNCTION WILL NOT APPEAR IN THE STACK TRACE.

THE EXPRESSION IS RESOLVED IN THE SAME WAY AS PROMISE.RESOLVE(): IT'S ALWAYS CONVERTED TO A NATIVE PROMISE AND THEN AWAITED. IF THE EXPRESSION IS A:

NATIVE PROMISE (WHICH MEANS EXPRESSION BELONGS TO PROMISE OR A SUBCLASS, AND EXPRESSION.CONSTRUCTOR === PROMISE): THE PROMISE IS DIRECTLY USED AND AWAITED NATIVELY, WITHOUT CALLING THEN().
THENABLE OBJECT (INCLUDING NON-NATIVE PROMISES, POLYFILL, PROXY, CHILD CLASS, ETC.): A NEW PROMISE IS CONSTRUCTED WITH THE NATI